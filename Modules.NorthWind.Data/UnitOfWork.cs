// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Modules.NorthWind.Data
{
    using EFTemplateCore;
    using Modules.NorthWind.Configuration;
    using Modules.NorthWind.Domain;
    using Modules.NorthWind.Interfaces;
    using System.Data.Common;
using Microsoft.EntityFrameworkCore;
    // UnitOfWork
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class UnitOfWork : BaseUnitOfWork<NorthWindContext>, IUnitOfWork
    {	    
		public UnitOfWork()
	    :base()
        {
        }

		 public UnitOfWork(string connectionString)
	    :base(connectionString)
        {
        }

	    public UnitOfWork(DbTransaction existingTransaction)
	    :base(existingTransaction)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BaseUnitOfWork{TContext}"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public UnitOfWork(DbConnection existingConnection)
		:base(existingConnection)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BaseUnitOfWork{TContext}"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public UnitOfWork(NorthWindContext context)
		:base(context)
        {
        }

		AlphabeticalListOfProductRepository alphabeticalListOfProductRepository;
		public AlphabeticalListOfProductRepository AlphabeticalListOfProductRepository
        {
            get
            {
                if (alphabeticalListOfProductRepository == null)
                {
                    alphabeticalListOfProductRepository  = new AlphabeticalListOfProductRepository(context);
                }
                return alphabeticalListOfProductRepository;
            }
        }

		CategoryRepository categoryRepository;
		public CategoryRepository CategoryRepository
        {
            get
            {
                if (categoryRepository == null)
                {
                    categoryRepository  = new CategoryRepository(context);
                }
                return categoryRepository;
            }
        }

		CategorySalesFor1997Repository categorySalesFor1997Repository;
		public CategorySalesFor1997Repository CategorySalesFor1997Repository
        {
            get
            {
                if (categorySalesFor1997Repository == null)
                {
                    categorySalesFor1997Repository  = new CategorySalesFor1997Repository(context);
                }
                return categorySalesFor1997Repository;
            }
        }

		CurrentProductListRepository currentProductListRepository;
		public CurrentProductListRepository CurrentProductListRepository
        {
            get
            {
                if (currentProductListRepository == null)
                {
                    currentProductListRepository  = new CurrentProductListRepository(context);
                }
                return currentProductListRepository;
            }
        }

		CustomerRepository customerRepository;
		public CustomerRepository CustomerRepository
        {
            get
            {
                if (customerRepository == null)
                {
                    customerRepository  = new CustomerRepository(context);
                }
                return customerRepository;
            }
        }

		CustomerAndSuppliersByCityRepository customerAndSuppliersByCityRepository;
		public CustomerAndSuppliersByCityRepository CustomerAndSuppliersByCityRepository
        {
            get
            {
                if (customerAndSuppliersByCityRepository == null)
                {
                    customerAndSuppliersByCityRepository  = new CustomerAndSuppliersByCityRepository(context);
                }
                return customerAndSuppliersByCityRepository;
            }
        }

		CustomerDemographicRepository customerDemographicRepository;
		public CustomerDemographicRepository CustomerDemographicRepository
        {
            get
            {
                if (customerDemographicRepository == null)
                {
                    customerDemographicRepository  = new CustomerDemographicRepository(context);
                }
                return customerDemographicRepository;
            }
        }

		EmployeeRepository employeeRepository;
		public EmployeeRepository EmployeeRepository
        {
            get
            {
                if (employeeRepository == null)
                {
                    employeeRepository  = new EmployeeRepository(context);
                }
                return employeeRepository;
            }
        }

		InvoiceRepository invoiceRepository;
		public InvoiceRepository InvoiceRepository
        {
            get
            {
                if (invoiceRepository == null)
                {
                    invoiceRepository  = new InvoiceRepository(context);
                }
                return invoiceRepository;
            }
        }

		OrderRepository orderRepository;
		public OrderRepository OrderRepository
        {
            get
            {
                if (orderRepository == null)
                {
                    orderRepository  = new OrderRepository(context);
                }
                return orderRepository;
            }
        }

		OrderDetailRepository orderDetailRepository;
		public OrderDetailRepository OrderDetailRepository
        {
            get
            {
                if (orderDetailRepository == null)
                {
                    orderDetailRepository  = new OrderDetailRepository(context);
                }
                return orderDetailRepository;
            }
        }

		OrderDetailsExtendedRepository orderDetailsExtendedRepository;
		public OrderDetailsExtendedRepository OrderDetailsExtendedRepository
        {
            get
            {
                if (orderDetailsExtendedRepository == null)
                {
                    orderDetailsExtendedRepository  = new OrderDetailsExtendedRepository(context);
                }
                return orderDetailsExtendedRepository;
            }
        }

		OrdersQryRepository ordersQryRepository;
		public OrdersQryRepository OrdersQryRepository
        {
            get
            {
                if (ordersQryRepository == null)
                {
                    ordersQryRepository  = new OrdersQryRepository(context);
                }
                return ordersQryRepository;
            }
        }

		OrderSubtotalRepository orderSubtotalRepository;
		public OrderSubtotalRepository OrderSubtotalRepository
        {
            get
            {
                if (orderSubtotalRepository == null)
                {
                    orderSubtotalRepository  = new OrderSubtotalRepository(context);
                }
                return orderSubtotalRepository;
            }
        }

		ProductRepository productRepository;
		public ProductRepository ProductRepository
        {
            get
            {
                if (productRepository == null)
                {
                    productRepository  = new ProductRepository(context);
                }
                return productRepository;
            }
        }

		ProductsAboveAveragePriceRepository productsAboveAveragePriceRepository;
		public ProductsAboveAveragePriceRepository ProductsAboveAveragePriceRepository
        {
            get
            {
                if (productsAboveAveragePriceRepository == null)
                {
                    productsAboveAveragePriceRepository  = new ProductsAboveAveragePriceRepository(context);
                }
                return productsAboveAveragePriceRepository;
            }
        }

		ProductSalesFor1997Repository productSalesFor1997Repository;
		public ProductSalesFor1997Repository ProductSalesFor1997Repository
        {
            get
            {
                if (productSalesFor1997Repository == null)
                {
                    productSalesFor1997Repository  = new ProductSalesFor1997Repository(context);
                }
                return productSalesFor1997Repository;
            }
        }

		ProductsByCategoryRepository productsByCategoryRepository;
		public ProductsByCategoryRepository ProductsByCategoryRepository
        {
            get
            {
                if (productsByCategoryRepository == null)
                {
                    productsByCategoryRepository  = new ProductsByCategoryRepository(context);
                }
                return productsByCategoryRepository;
            }
        }

		QuarterlyOrderRepository quarterlyOrderRepository;
		public QuarterlyOrderRepository QuarterlyOrderRepository
        {
            get
            {
                if (quarterlyOrderRepository == null)
                {
                    quarterlyOrderRepository  = new QuarterlyOrderRepository(context);
                }
                return quarterlyOrderRepository;
            }
        }

		RegionRepository regionRepository;
		public RegionRepository RegionRepository
        {
            get
            {
                if (regionRepository == null)
                {
                    regionRepository  = new RegionRepository(context);
                }
                return regionRepository;
            }
        }

		SalesByCategoryRepository salesByCategoryRepository;
		public SalesByCategoryRepository SalesByCategoryRepository
        {
            get
            {
                if (salesByCategoryRepository == null)
                {
                    salesByCategoryRepository  = new SalesByCategoryRepository(context);
                }
                return salesByCategoryRepository;
            }
        }

		SalesTotalsByAmountRepository salesTotalsByAmountRepository;
		public SalesTotalsByAmountRepository SalesTotalsByAmountRepository
        {
            get
            {
                if (salesTotalsByAmountRepository == null)
                {
                    salesTotalsByAmountRepository  = new SalesTotalsByAmountRepository(context);
                }
                return salesTotalsByAmountRepository;
            }
        }

		ShipperRepository shipperRepository;
		public ShipperRepository ShipperRepository
        {
            get
            {
                if (shipperRepository == null)
                {
                    shipperRepository  = new ShipperRepository(context);
                }
                return shipperRepository;
            }
        }

		SummaryOfSalesByQuarterRepository summaryOfSalesByQuarterRepository;
		public SummaryOfSalesByQuarterRepository SummaryOfSalesByQuarterRepository
        {
            get
            {
                if (summaryOfSalesByQuarterRepository == null)
                {
                    summaryOfSalesByQuarterRepository  = new SummaryOfSalesByQuarterRepository(context);
                }
                return summaryOfSalesByQuarterRepository;
            }
        }

		SummaryOfSalesByYearRepository summaryOfSalesByYearRepository;
		public SummaryOfSalesByYearRepository SummaryOfSalesByYearRepository
        {
            get
            {
                if (summaryOfSalesByYearRepository == null)
                {
                    summaryOfSalesByYearRepository  = new SummaryOfSalesByYearRepository(context);
                }
                return summaryOfSalesByYearRepository;
            }
        }

		SupplierRepository supplierRepository;
		public SupplierRepository SupplierRepository
        {
            get
            {
                if (supplierRepository == null)
                {
                    supplierRepository  = new SupplierRepository(context);
                }
                return supplierRepository;
            }
        }

		TerritoryRepository territoryRepository;
		public TerritoryRepository TerritoryRepository
        {
            get
            {
                if (territoryRepository == null)
                {
                    territoryRepository  = new TerritoryRepository(context);
                }
                return territoryRepository;
            }
        }

}
}
// </auto-generated>

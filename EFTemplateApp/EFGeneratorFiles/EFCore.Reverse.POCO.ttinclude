<#@ import namespace="System.Collections.Generic" #>
<#
fileManager.StartHeader();
// Copyright (C) Simon Hughes 2012
// v2.35.0
#>

<#if (Settings.ElementsToGenerate.HasFlag(Elements.Poco) || Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration))
{
    if (Settings.UseDataAnnotations) {#>
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
<#  }
}
#>

namespace <#= Settings.Namespace #> 
{
<#
var usingsContext = new List<string>();
var usingsAll = new List<string>();

usingsAll.AddRange(Settings.AdditionalNamespaces.Where(x => !string.IsNullOrEmpty(x)));

if ((Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration) ||
     Settings.ElementsToGenerate.HasFlag(Elements.Context) ||
     Settings.ElementsToGenerate.HasFlag(Elements.UnitOfWork)) &&
    (!Settings.ElementsToGenerate.HasFlag(Elements.Poco) && !string.IsNullOrWhiteSpace(Settings.PocoNamespace)))
    usingsAll.Add(Settings.PocoNamespace);

if (Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration) &&
    (!Settings.ElementsToGenerate.HasFlag(Elements.Context) && !string.IsNullOrWhiteSpace(Settings.ContextNamespace)))
    usingsAll.Add(Settings.ContextNamespace);

if (Settings.ElementsToGenerate.HasFlag(Elements.Context) &&
    (!Settings.ElementsToGenerate.HasFlag(Elements.UnitOfWork) && !string.IsNullOrWhiteSpace(Settings.UnitOfWorkNamespace)))
    usingsAll.Add(Settings.UnitOfWorkNamespace);

if (Settings.ElementsToGenerate.HasFlag(Elements.Context) &&
    (!Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration) && !string.IsNullOrWhiteSpace(Settings.PocoConfigurationNamespace)))
    usingsAll.Add(Settings.PocoConfigurationNamespace);

if (Settings.ElementsToGenerate.HasFlag(Elements.Context))
{
    if (Settings.AddUnitTestingDbContext || Settings.StoredProcs.Any())
    {
        usingsContext.Add("System.Linq");
    }
}
if (!Settings.GenerateSeparateFiles)
{
    usingsAll.AddRange(usingsContext);
}
foreach(var usingStatement in usingsAll.Distinct().OrderBy(x => x)) { #>
    using <#= usingStatement #>;
<# } #>
	using Microsoft.EntityFrameworkCore;
<#if (Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration))
{#>
	using Microsoft.EntityFrameworkCore.Metadata.Builders;
<#} 
#>
<# if (Settings.ElementsToGenerate.HasFlag(Elements.UnitOfWork) && !string.IsNullOrWhiteSpace(Settings.DbContextInterfaceName))
{
    fileManager.StartNewFile("Interfaces\\"+Settings.DbContextInterfaceName + Settings.FileExtension);
    if (!Settings.GenerateSeparateFiles)
    { #>
    #region Unit of work

<# }#>
    <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <# if(Settings.MakeDbContextInterfacePartial) { #>partial <# } #>interface <#=Settings.DbContextInterfaceName #> : <#= Settings.DbContextInterfaceBaseClasses #>
    {
<#
foreach (Table tbl in from t in Settings.Tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase) select t)
{
#>
        DbSet<<#=tbl.NameHumanCaseWithSuffix #>> <#=Inflector.MakePlural(tbl.NameHumanCase) #> { get; set; }<#if (Settings.IncludeComments != CommentsStyle.None)
{ #> // <#=tbl.Name #>
<# }
else
{ #>

<# } #>
<# } #>

<#foreach (string s in Settings.AdditionalContextInterfaceItems.Where(x => !string.IsNullOrEmpty(x)))
{ #>
        <#=s #>
<# } #>
        int SaveChanges();
<# if (Settings.IsSupportedFrameworkVersion("4.5")) { #>
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
<# } #>

        Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker ChangeTracker { get; }
        Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade Database { get; }
        Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry Entry(object entity);
        Microsoft.EntityFrameworkCore.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

<# if (Settings.StoredProcs.Any()) { #>

        // Stored Procedures
<#      // Interface
foreach (StoredProcedure sp in Settings.StoredProcs.Where(s => !s.IsTVF).OrderBy(x => x.NameHumanCase))
{
    int returnModelsCount = sp.ReturnModels.Count;
    if (returnModelsCount == 1)
    { #>
        <#=WriteStoredProcReturnType(sp) #> <#=WriteStoredProcFunctionName(sp)#>(<#=WriteStoredProcFunctionParams(sp, false) #>);
        <#=WriteStoredProcReturnType(sp) #> <#=WriteStoredProcFunctionName(sp)#>(<#=WriteStoredProcFunctionParams(sp, true) #>);
<#  } else { #>
        <#=WriteStoredProcReturnType(sp) #> <#=WriteStoredProcFunctionName(sp)#>(<#=WriteStoredProcFunctionParams(sp, false) #>);
<#  }
    if (Settings.IsSupportedFrameworkVersion("4.5"))
    {
        if(StoredProcHasOutParams(sp) || sp.ReturnModels.Count == 0) { #>
        // <#=WriteStoredProcFunctionName(sp)#>Async cannot be created due to having out parameters, or is relying on the procedure result (<#=WriteStoredProcReturnType(sp)#>)
<# } else { #>
        System.Threading.Tasks.Task<<#=WriteStoredProcReturnType(sp)#>> <#=WriteStoredProcFunctionName(sp)#>Async(<#=WriteStoredProcFunctionParams(sp, false) #>);
<# } #>
<# } #>

<#
}

if (Settings.IncludeTableValuedFunctions)
{ #>

        // Table Valued Functions
<#      foreach (StoredProcedure sp in Settings.StoredProcs.Where(s => s.IsTVF).OrderBy(x => x.NameHumanCase))
        {
            string spExecName = WriteStoredProcFunctionName(sp);
            string spReturnClassName = WriteStoredProcReturnModelName(sp);
#>
        System.Linq.IQueryable<<#= spReturnClassName #>> <#= spExecName #>(<#=WriteStoredProcFunctionParams(sp, false)#>);
<#
    }
}
#>
<# /**/} #>
    }

<# }
 if(!string.IsNullOrWhiteSpace(Settings.MigrationConfigurationFileName)) {
       fileManager.StartNewFile("Configuration\\"+Settings.MigrationConfigurationFileName + Settings.FileExtension);  #>
<# if(!Settings.GenerateSeparateFiles) { #>
    // ************************************************************************
    // Db Migration Configuration
<# } #>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    internal sealed <# if(Settings.MakeClassesPartial) { #>partial <# } #>class <#=Settings.MigrationConfigurationFileName#> : System.Data.Entity.Migrations.DbMigrationsConfiguration<<#=Settings.DbContextName#>>
    {
        <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <#=Settings.MigrationConfigurationFileName#>()
        {
            Settings.AutomaticMigrationsEnabled = <# if (Settings.AutomaticMigrationsEnabled) { #>true<# } else { #>false<# } #>;
            Settings.AutomaticMigrationDataLossAllowed = <# if (Settings.AutomaticMigrationDataLossAllowed) { #>true<# } else { #>false<# } #>;
<# if (!string.IsNullOrEmpty(Settings.ContextKey)) { #>
            Settings.ContextKey = "<#= Settings.ContextKey #>";
<# } #>
        }

        //protected override void Seed(<#=Settings.DbContextName#> context)
        //{

            // This method will be called after migrating to the latest version.

            // You can use the DbSet<T>.AddOrUpdate() helper extension method
            // to avoid creating duplicate seed data. E.g.
            //
            //   context.People.AddOrUpdate(
            //     p => p.FullName,
            //     new Person { FullName = "Andrew Peters" },
            //     new Person { FullName = "Brice Lambson" },
            //     new Person { FullName = "Rowan Miller" }
            //   );
            //
        //}
    }

<# }
if(Settings.ElementsToGenerate.HasFlag(Elements.UnitOfWork) && !string.IsNullOrWhiteSpace(Settings.DbContextInterfaceName) && !Settings.GenerateSeparateFiles) { #>
    #endregion

<# }
    if(Settings.ElementsToGenerate.HasFlag(Elements.Context)){
    fileManager.StartNewFile("Data\\"+Settings.DbContextName + Settings.FileExtension); #>
<# if(!Settings.GenerateSeparateFiles) { #>
    #region Database context

<# } else {
foreach(var usingStatement in usingsContext.Distinct().OrderBy(x => x)) { #>
    using <#= usingStatement #>;
<# } #>

<# } #>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <# if(Settings.MakeClassesPartial) { #>partial <# } #>class <#=Settings.DbContextName#> : <#=Settings.DbContextBaseClass#><#= (string.IsNullOrWhiteSpace(Settings.DbContextInterfaceName) ? "" : ", " + Settings.DbContextInterfaceName)#>
    {
<#
foreach(Table tbl in from t in Settings.Tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase) select t)
{
#>
        public DbSet<<#=tbl.NameHumanCaseWithSuffix#>> <#=Inflector.MakePlural(tbl.NameHumanCase)#> { get; set; }<#if(Settings.IncludeComments != CommentsStyle.None){#> // <#=tbl.Name#>
<# } else { #>

<# } #>
<# } #>

        <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <#=Settings.DbContextName#> (ConnectionType contextType, string connectionName)
            : base(contextType, connectionName)
        {
        }

        <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <#=Settings.DbContextName#>()
        {
<#if(Settings.MakeClassesPartial) {#>            InitializePartial();
<#}#>
        }

        <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <#=Settings.DbContextName#>(string connectionName)
		:base(connectionName)
        {
<#if(Settings.MakeClassesPartial) {#>            InitializePartial();
<#}#>		    
        }

<#if(!Settings.IsSqlCe){ #>
        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

<#}#>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
<# if(Settings.StoredProcs.Any() && Settings.IncludeTableValuedFunctions)
{ #>

            modelBuilder.Conventions.Add(new CodeFirstStoreFunctions.FunctionsConvention<<#=Settings.DbContextName#>>("dbo"));
<#      foreach (var sp in Settings.StoredProcs.Where(s => s.IsTVF && !Settings.StoredProcedureReturnTypes.ContainsKey(s.NameHumanCase) && !Settings.StoredProcedureReturnTypes.ContainsKey(s.Name)).OrderBy(x => x.NameHumanCase)){#>
            modelBuilder.ComplexType<<#=WriteStoredProcReturnModelName(sp)#>>();
<# } } #>
<#
foreach(var tbl in from t in Settings.Tables.Where(t => !t.IsMapping && t.HasPrimaryKey).Where(Settings.ConfigurationFilter).OrderBy(x => x.NameHumanCase) select t)
{
#>		    modelBuilder.ApplyConfiguration<<#=tbl.NameHumanCaseWithSuffix#>>(new <#=tbl.NameHumanCaseWithSuffix + Settings.ConfigurationClassName#>());
<# } #>
<#if(Settings.MakeClassesPartial) {#>

            OnModelCreatingPartial(modelBuilder);
<#}#>
        }
<#if(Settings.MakeClassesPartial) {#>

        partial void InitializePartial();
        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
<#}#>
<# if (Settings.StoredProcs.Any())
{ #>

        // Stored Procedures
<#      // Database context
foreach (var sp in Settings.StoredProcs.Where(s => !s.IsTVF).OrderBy(x => x.NameHumanCase))
{
    string spReturnClassName = WriteStoredProcReturnModelName(sp);
    string spExecName = WriteStoredProcFunctionName(sp);
    int returnModelsCount = sp.ReturnModels.Count;
    if (returnModelsCount > 0)
    {
        if (returnModelsCount == 1)
        { #>
        public <#=WriteStoredProcReturnType(sp) #> <#=WriteStoredProcFunctionName(sp) #>(<#=WriteStoredProcFunctionParams(sp, false) #>)
        {
            int procResult;
            return <#= spExecName #>(<#=WriteStoredProcFunctionOverloadCall(sp) #>);
        }

        public <#=WriteStoredProcReturnType(sp) #> <#=WriteStoredProcFunctionName(sp) #>(<#=WriteStoredProcFunctionParams(sp, true) #>)
<#      } else { #>
        public <#=WriteStoredProcReturnType(sp) #> <#=WriteStoredProcFunctionName(sp) #>(<#=WriteStoredProcFunctionParams(sp, false) #>)
<#      } #>
        {
<#= WriteStoredProcFunctionDeclareSqlParameter(sp, true) #><#
        if (returnModelsCount == 1)
        {
            var exec = string.Format("EXEC @procResult = [{0}].[{1}] {2}", sp.Schema, sp.Name, WriteStoredProcFunctionSqlAtParams(sp)); #>
          	var procResultData = this.Set<<#= spReturnClassName #>>().FromSql("<#= exec #>", <#= WriteStoredProcFunctionSqlParameterAnonymousArray(sp, true) #>).ToList();
<#= WriteStoredProcFunctionSetSqlParameters(sp, false) #>
            procResult = (int) procResultParam.Value;
<# }
        else
        {
            var exec = string.Format("[{0}].[{1}]", sp.Schema, sp.Name); #>
<#= WriteStoredProcFunctionSetSqlParameters(sp, false) #>
            var procResultData = new <#= spReturnClassName #>();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "<#= exec #>";
<#          foreach (var p in sp.Parameters.OrderBy(x => x.Ordinal))
{ #>
            cmd.Parameters.Add(<#= WriteStoredProcSqlParameterName(p) #>);
<# } #>

            try
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Open(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

<# int n = 0;
            var returnModelCount = sp.ReturnModels.Count;
            foreach (var returnModel in sp.ReturnModels)
            {
                n++; #>
                procResultData.ResultSet<#= n #> = objectContext.Translate<<#= spReturnClassName #>.ResultSetModel<#= n #>>(reader).ToList();
<#                  if (n < returnModelCount)
{ #>
                reader.NextResult();

<# } #>
<# } #>
                reader.Close();
<#= WriteStoredProcFunctionSetSqlParameters(sp, false) #>
            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
<# } #>
            return procResultData;
        }

<# }
        else
            { #>
        public int <#= spExecName #>(<#=WriteStoredProcFunctionParams(sp, true) #>)
        {
<#= WriteStoredProcFunctionDeclareSqlParameter(sp, true) #>
            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [<#=sp.Schema #>].[<#= sp.Name #>] <#= WriteStoredProcFunctionSqlAtParams(sp) #>", <#= WriteStoredProcFunctionSqlParameterAnonymousArray(sp, true) #>);
<#= WriteStoredProcFunctionSetSqlParameters(sp, false) #>
            return (int) procResultParam.Value;
        }

<# }
    // Async
    if (Settings.IsSupportedFrameworkVersion("4.5") && !StoredProcHasOutParams(sp) && returnModelsCount > 0)
    {#>
        public async System.Threading.Tasks.Task<<#=WriteStoredProcReturnType(sp) #>> <#=WriteStoredProcFunctionName(sp) #>Async(<#=WriteStoredProcFunctionParams(sp, false) #>)
        {
<#= WriteStoredProcFunctionDeclareSqlParameter(sp, false) #><#
        if (returnModelsCount == 1)
        {
            var parameters = WriteStoredProcFunctionSqlParameterAnonymousArray(sp, false);
            if (!string.IsNullOrWhiteSpace(parameters))
                parameters = ", " + parameters;
            var exec = string.Format("EXEC [{0}].[{1}] {2}", sp.Schema, sp.Name, WriteStoredProcFunctionSqlAtParams(sp)); #>
            var procResultData = await Database.SqlQuery<<#= spReturnClassName #>>("<#= exec #>"<#= parameters #>).ToListAsync();
<#= WriteStoredProcFunctionSetSqlParameters(sp, false) #>
<# }
        else
        {
            var exec = string.Format("[{0}].[{1}]", sp.Schema, sp.Name); #>
<#= WriteStoredProcFunctionSetSqlParameters(sp, false) #>
            var procResultData = new <#= spReturnClassName #>();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "<#= exec #>";
<#          foreach (var p in sp.Parameters.OrderBy(x => x.Ordinal))
{ #>
            cmd.Parameters.Add(<#= WriteStoredProcSqlParameterName(p) #>);
<# } #>

            try
            {
                await System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.OpenAsync(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext(), new System.Threading.CancellationToken()).ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

<# int n = 0;
            var returnModelCount = sp.ReturnModels.Count;
            foreach (var returnModel in sp.ReturnModels)
            {
                n++; #>
                procResultData.ResultSet<#= n #> = objectContext.Translate<<#= spReturnClassName #>.ResultSetModel<#= n #>>(reader).ToList();
<#                  if (n < returnModelCount)
{ #>
                await reader.NextResultAsync().ConfigureAwait(false);

<# } #>
<# } #>
            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
<# } #>
            return procResultData;
        }

<# }
}
if (Settings.IncludeTableValuedFunctions)
{ #>
        // Table Valued Functions
<#
        foreach (var sp in Settings.StoredProcs.Where(s => s.IsTVF).OrderBy(x => x.NameHumanCase))
        {
            string spExecName = WriteStoredProcFunctionName(sp);
            string spReturnClassName = WriteStoredProcReturnModelName(sp);
#>
        [System.Data.Entity.DbFunction("<#=Settings.DbContextName#>", "<#=sp.Name#>")]
        [CodeFirstStoreFunctions.DbFunctionDetails(DatabaseSchema = "<#=sp.Schema#>"<#if (sp.ReturnModels.Count == 1 && sp.ReturnModels[0].Count == 1) {#>, ResultColumnName = "<#=sp.ReturnModels[0][0].ColumnName#>"<#}#>)]
        public IQueryable<<#= spReturnClassName #>> <#= spExecName #>(<#=WriteStoredProcFunctionParams(sp, false)#>)
        {
<#= WriteTableValuedFunctionDeclareSqlParameter(sp) #>
            return ((System.Data.Entity.Infrastructure.IObjectContextAdapter)this).ObjectContext.CreateQuery<<#=spReturnClassName#>>("[<#=Settings.DbContextName#>].[<#=sp.Name#>](<#= WriteStoredProcFunctionSqlAtParams(sp) #>)", <#= WriteTableValuedFunctionSqlParameterAnonymousArray(sp) #>);
        }

<# } } }
/**/#>    }
<# }
if(Settings.ElementsToGenerate.HasFlag(Elements.Context) && !Settings.GenerateSeparateFiles) { #>
    #endregion

<# }
    if (Settings.ElementsToGenerate.HasFlag(Elements.Context) && Settings.AddUnitTestingDbContext)
    {
        fileManager.StartNewFile("Data\\"+"Fake"  + Settings.ModuleName + "UnitOfWork" + Settings.FileExtension); #>
	public static class Fake<#=Settings.ModuleName#>UnitOfWork
	{
		public static <#=Settings.ModuleName#>UnitOfWork Get()
		{
			return new <#=Settings.ModuleName#>UnitOfWork(ConnectionType.InMemoryDatabaseConnection, "<#=Settings.ModuleName#>FakeDb");
		}
	}
<#
	}

 if(Settings.ElementsToGenerate.HasFlag(Elements.UnitOfWork))
 {
////////Elements.UnitOfWork


foreach(Table tbl in from t in Settings.Tables.Where(t => !t.IsMapping).OrderBy(x => x.NameHumanCase) select t)
{
 fileManager.StartNewFile("Interfaces\\"+"Repositories\\I" + tbl.NameHumanCaseWithSuffix + "Repository" + Settings.FileExtension);

if(Settings.IncludeComments != CommentsStyle.None){#>    // <#=tbl.Name#>Repository
<# } #>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
	public interface I<#=tbl.NameHumanCaseWithSuffix#>Repository<<#=tbl.NameHumanCaseWithSuffix#>> : IRepository<<#=tbl.NameHumanCaseWithSuffix#>> where <#=tbl.NameHumanCaseWithSuffix#> : class, IEntity, new()
	{
<#if(tbl.PrimaryKeys != null && tbl.PrimaryKeys.Count() > 0){#>
		<#=tbl.NameHumanCaseWithSuffix#> Get<#=tbl.NameHumanCaseWithSuffix#>ByKey(<#= string.Join(", ", tbl.PrimaryKeys.Select(x => x.PropertyType +  " " + x.NameHumanCase)) #>);
<#}#>
	}

<#
}

}

if(Settings.ElementsToGenerate.HasFlag(Elements.Context)){

foreach(Table tbl in from t in Settings.Tables.Where(t => !t.IsMapping).OrderBy(x => x.NameHumanCase) select t)
{
 fileManager.StartNewFile("Data\\Repositories\\AutoGenerated\\" + tbl.NameHumanCaseWithSuffix + "Repository" + Settings.FileExtension);

if(Settings.IncludeComments != CommentsStyle.None){#>    // <#=tbl.Name#>Repository
<# } #>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
public partial class <#=tbl.NameHumanCaseWithSuffix#>Repository : GenericRepository<<#=tbl.NameHumanCaseWithSuffix#>> , I<#=tbl.NameHumanCaseWithSuffix#>Repository<<#=tbl.NameHumanCaseWithSuffix#>>
{
    public <#=tbl.NameHumanCaseWithSuffix#>Repository(EFContext context, string safeCode)
        : base(context, safeCode)
    {
    }
    public <#=tbl.NameHumanCaseWithSuffix#>Repository(EFContext context)
        : base(context)
    {
    }
	<#if(tbl.PrimaryKeys != null && tbl.PrimaryKeys.Count() > 0){#>
    public <#=tbl.NameHumanCaseWithSuffix#> Get<#=tbl.NameHumanCaseWithSuffix#>ByKey(<#= string.Join(", ", tbl.PrimaryKeys.Select(x => x.PropertyType +  " " + x.NameHumanCase)) #>)
    {
        return FirstOrDefault(p => <#= string.Join(" && ", tbl.PrimaryKeys.Select(x => "p."+ x.NameHumanCase + "==" + x.NameHumanCase)) #>);
    }
	<#}#>
}
<#


fileManager.StartNewFile("Data\\Repositories\\Custom\\" + tbl.NameHumanCaseWithSuffix + "Repository" + Settings.FileExtension, true);

if(Settings.IncludeComments != CommentsStyle.None){#>    // <#=tbl.Name#>Repository
<# } #>

	//You can customize this class.
	public partial class <#=tbl.NameHumanCaseWithSuffix#>Repository : GenericRepository<<#=tbl.NameHumanCaseWithSuffix#>> , I<#=tbl.NameHumanCaseWithSuffix#>Repository<<#=tbl.NameHumanCaseWithSuffix#>>
	{
	}
<#

}

fileManager.StartNewFile("Data\\"+"Interfaces\\I" + Settings.ModuleName + "UnitOfWork.cs");

if(Settings.IncludeComments != CommentsStyle.None){#>    // I<#=Settings.ModuleName#>UnitOfWork
<# } #>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    public interface I<#=Settings.ModuleName#>UnitOfWork  : System.IDisposable
    {
	<#
		foreach(Table tbl in from t in Settings.Tables.Where(t => !t.IsMapping).OrderBy(x => x.NameHumanCase) select t)
		{
		#>	<#=tbl.NameHumanCaseWithSuffix#>Repository <#=tbl.NameHumanCaseWithSuffix#>Repository { get; }
	<# 
	}#>}
<#

fileManager.StartNewFile("Data\\"+"Interfaces\\I" + Settings.ModuleName + "TransactionalUnitOfWork.cs");

if(Settings.IncludeComments != CommentsStyle.None){#>    // I<#=Settings.ModuleName#>TransactionalUnitOfWork
<# } #>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    public interface I<#=Settings.ModuleName#>TransactionalUnitOfWork: IUnitOfWork<<#=Settings.DbContextName#>>, I<#=Settings.ModuleName#>UnitOfWork
    {
    }
<#

fileManager.StartNewFile("Data\\"+Settings.ModuleName + "UnitOfWork.cs");

if(Settings.IncludeComments != CommentsStyle.None){#>    // <#=Settings.ModuleName#>UnitOfWork
<# } #>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    public class <#=Settings.ModuleName#>UnitOfWork : UnitOfWork<<#=Settings.DbContextName#>>, I<#=Settings.ModuleName#>TransactionalUnitOfWork
    {	    
		public <#=Settings.ModuleName#>UnitOfWork()
	    :base()
        {
        }

		 public <#=Settings.ModuleName#>UnitOfWork(string connectionName)
	    :base(connectionName)
        {
        }

		public <#=Settings.ModuleName#>UnitOfWork(ConnectionType connectionType, string connectionName)
            : base(connectionType, connectionName)
        {
        }

	    public <#=Settings.ModuleName#>UnitOfWork(DbTransaction existingTransaction)
	    :base(existingTransaction)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UnitOfWork{TContext}"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public <#=Settings.ModuleName#>UnitOfWork(DbConnection existingConnection)
		:base(existingConnection)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UnitOfWork{TContext}"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public <#=Settings.ModuleName#>UnitOfWork(<#=Settings.DbContextName#> context)
		:base(context)
        {
        }

<#
foreach(Table tbl in from t in Settings.Tables.Where(t => !t.IsMapping).OrderBy(x => x.NameHumanCase) select t)
{
#>		<#=tbl.NameHumanCaseWithSuffix#>Repository <#=StringHelper.ConvertToCamelCaseFromPascalCase(tbl.NameHumanCaseWithSuffix + "Repository")#>;
		public <#=tbl.NameHumanCaseWithSuffix#>Repository <#=tbl.NameHumanCaseWithSuffix#>Repository
        {
            get
            {
                if (<#=StringHelper.ConvertToCamelCaseFromPascalCase(tbl.NameHumanCaseWithSuffix + "Repository")#> == null)
                {
                    <#=StringHelper.ConvertToCamelCaseFromPascalCase(tbl.NameHumanCaseWithSuffix + "Repository")#>  = new <#=tbl.NameHumanCaseWithSuffix#>Repository(context);
                }
                return <#=StringHelper.ConvertToCamelCaseFromPascalCase(tbl.NameHumanCaseWithSuffix + "Repository")#>;
            }
        }

<# 
}#>}
<#
}
 if(Settings.ElementsToGenerate.HasFlag(Elements.Poco)){
 if(!Settings.GenerateSeparateFiles) { #>
    #region POCO classes

<# } #>
<#
foreach(Table tbl in from t in Settings.Tables.Where(t => !t.IsMapping).OrderBy(x => x.NameHumanCase) select t)
{
#>
<# fileManager.StartNewFile("Domain\\"+"Entities\\" + tbl.NameHumanCaseWithSuffix + Settings.FileExtension);
if(!tbl.HasPrimaryKey) { #>
    // The table '<#=tbl.Name#>' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
<# } #>
<#if(Settings.IncludeComments != CommentsStyle.None){#>    // <#=tbl.Name#>
<# } #>
<# WritePocoClassExtendedComments(tbl);
    WritePocoClassAttributes(tbl);#>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <# if(Settings.MakeClassesPartial) { #>partial <# } #>class <#=tbl.NameHumanCaseWithSuffix#><#=WritePocoBaseClasses != null ? WritePocoBaseClasses(tbl) : "" #>
    {
<# WritePocoBaseClassBody(tbl); #>
<# foreach(Column col in tbl.Columns.OrderBy(x => x.Ordinal).Where(x => !x.Hidden))
{
#>
<#= WritePocoColumn(col) #>
<# } #>

//TODO: Deleted relational properties

//TODO: Deleted foreign key rows from here

<#
if (!Settings.UsePropertyInitializers){
if(tbl.Columns.Where(c => c.Default != string.Empty && !c.Hidden).Count() > 0 || tbl.ReverseNavigationCtor.Count() > 0 || Settings.MakeClassesPartial)
{
#>

        public <#=tbl.NameHumanCaseWithSuffix#>()
        {
<#
foreach(var col in tbl.Columns.OrderBy(x => x.Ordinal).Where(c => c.Default != string.Empty && !c.Hidden))
{
#>
            <#=col.NameHumanCase #> = <#=col.Default #>;
<# } #>
//TODO: Deleted relational property creation rows.
<#
if(Settings.MakeClassesPartial) {#>
            InitializePartial();
<#}#>        }
<#if(Settings.MakeClassesPartial) {#>

        partial void InitializePartial();
<#} }
}#>
    }

<# } }
if(Settings.ElementsToGenerate.HasFlag(Elements.Poco) && !Settings.GenerateSeparateFiles) { #>
    #endregion

<# }
if(Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration)){
if(!Settings.GenerateSeparateFiles) { #>
    #region POCO Configuration

<# } #>
<#
foreach(var tbl in Settings.Tables.Where(t => !t.IsMapping && t.HasPrimaryKey).OrderBy(x => x.NameHumanCase))
{
#>
<# fileManager.StartNewFile("Configuration\\"+tbl.NameHumanCaseWithSuffix + Settings.ConfigurationClassName + Settings.FileExtension);
if(Settings.IncludeComments != CommentsStyle.None){#>    // <#=tbl.Name#>
<# } #>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    <# if(Settings.MakeClassesInternal) { #>internal<# } else { #>public<# } #> <# if(Settings.MakeClassesPartial) { #>partial <# } #> class <#=tbl.NameHumanCaseWithSuffix + Settings.ConfigurationClassName#> : IEntityTypeConfiguration<<#=tbl.NameHumanCaseWithSuffix#>>
    {
    public void Configure(EntityTypeBuilder<<#=tbl.NameHumanCaseWithSuffix#>> builder)
        {
<#if(!Settings.UseDataAnnotationsSchema){ if (!string.IsNullOrEmpty(tbl.Schema)) { #>
            builder.ToTable("<#=tbl.Name#>", "<#=tbl.Schema#>");
<# } else { #>
            builder.ToTable("<#=tbl.Name#>");
<# }}
if(!Settings.UseDataAnnotations){#>
            builder.HasKey(<#=tbl.PrimaryKeyNameHumanCase()#>);

<# } #>
<#
foreach(var col in tbl.Columns.Where(x => !x.Hidden && !string.IsNullOrEmpty(x.Config)).OrderBy(x => x.Ordinal))
{
#>
            builder.<#=col.Config #>
<# } #>



//TODO: Deleted foreign key and relation mapping configuration rows from here


<#if(Settings.MakeClassesPartial) {#>
            InitializePartial();
<#}#>        }
<#if(Settings.MakeClassesPartial) {#>
        partial void InitializePartial();
<#}#>    }
  
<# } }
if(Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration) && !Settings.GenerateSeparateFiles) { #>
    #endregion

<# }
if(Settings.StoredProcs.Any() && Settings.ElementsToGenerate.HasFlag(Elements.Poco)){
if(!Settings.GenerateSeparateFiles) { #>
    #region Stored procedure return models

<# } #>
<#
foreach(var sp in Settings.StoredProcs.Where(x => x.ReturnModels.Count > 0 && x.ReturnModels.Any(returnColumns => returnColumns.Any()) && !Settings.StoredProcedureReturnTypes.ContainsKey(x.NameHumanCase) && !Settings.StoredProcedureReturnTypes.ContainsKey(x.Name)).OrderBy(x => x.NameHumanCase))
{
    string spReturnClassName = WriteStoredProcReturnModelName(sp);
#>
<# fileManager.StartNewFile("Domain\\"+spReturnClassName + Settings.FileExtension);#>
<#if(Settings.IncludeCodeGeneratedAttribute){#>    <#=CodeGeneratedAttribute#>
<#}#>
    public <# if(Settings.MakeClassesPartial) { #>partial <# } #>class <#= spReturnClassName #>
    {
<#
var returnModelCount = sp.ReturnModels.Count;
if(returnModelCount < 2)
{
    foreach (var returnColumn in sp.ReturnModels.First())
    { #>
        <#= WriteStoredProcReturnColumn(returnColumn) #>
<#  }
} else {
    int model = 0;
    foreach (var returnModel in sp.ReturnModels)
    {
        model++;#>
        public class ResultSetModel<#= model #>
        {
<#      foreach (var returnColumn in returnModel)
        { #>
            <#= WriteStoredProcReturnColumn(returnColumn) #>
<#      }#>
        }
        public System.Collections.Generic.List<ResultSetModel<#= model #>> ResultSet<#= model #>;

<#  } #>
<# } #>
    }

<# }
if(Settings.StoredProcs.Any() && Settings.ElementsToGenerate.HasFlag(Elements.Poco) && !Settings.GenerateSeparateFiles) { #>
    #endregion

<# } } #>
<# fileManager.StartFooter(); #>
}

<# fileManager.EndBlock();
if(Settings.GenerateSeparateFiles)
{
    fileManager.Process(true);
    GenerationEnvironment.Clear();
	#>//The files have been created successfully.(<#=System.DateTime.Now#>)
	<#
}
}
#>
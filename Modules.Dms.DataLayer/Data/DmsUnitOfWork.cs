// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 2
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Modules.Dms.DataLayer
{
    using EFTemplateCore;
    using EFTemplateCore.Interfaces;
    using Modules.Dms.DataLayer.Data;
    using Modules.Dms.DataLayer.Data.Interfaces;
    using Modules.Dms.DataLayer.Domain;
    using Modules.Dms.DataLayer.Domain.Enums;
    using System.Data.Common;
	using Microsoft.EntityFrameworkCore;
	using Microsoft.EntityFrameworkCore.Metadata.Builders;
    // DmsUnitOfWork
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.34.1.0")]
    public class DmsUnitOfWork : UnitOfWork<DmsContext>, IDmsTransactionalUnitOfWork
    {	    
		public DmsUnitOfWork()
	    :base()
        {
        }

		 public DmsUnitOfWork(string connectionName)
	    :base(connectionName)
        {
        }

	    public DmsUnitOfWork(DbTransaction existingTransaction)
	    :base(existingTransaction)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UnitOfWork{TContext}"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public DmsUnitOfWork(DbConnection existingConnection)
		:base(existingConnection)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UnitOfWork{TContext}"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public DmsUnitOfWork(DmsContext context)
		:base(context)
        {
        }

		DocumentRepository documentRepository;
		public DocumentRepository DocumentRepository
        {
            get
            {
                if (documentRepository == null)
                {
                    documentRepository  = new DocumentRepository(context);
                }
                return documentRepository;
            }
        }

}
}
// </auto-generated>
